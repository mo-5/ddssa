import concurrent.futures

import pandas as pd

from capstone_project.backend.api.vulnerability_query import VulnerabilityQuery


class VulnerabilityAggregator:
    """This class is used to aggregate CVE query results"""

    _NUM_THREADS = 4
    _api_key = None
    _results = []

    def __init__(self, api_key=None):
        self._api_key = api_key

    def coordinate_queries(self, df):
        """Coordinate queries between multiple processes if the size
        of the dataframe warrants it. This size limit is ignored if a
        user has supplied a NIST API key.
        """
        if df.shape[1] <= self._NUM_THREADS or (
            df.shape[1] >= 10 and self._api_key is None
        ):
            return self._run_queries(df)
        else:
            frames = self._split_dataframe(df, self._NUM_THREADS)
            with concurrent.futures.ThreadPoolExecutor() as executor:
                futures = [executor.submit(self._run_queries, df) for df in frames]
                concurrent.futures.wait(futures, return_when=concurrent.futures.ALL_COMPLETED)
            self._results = [f.result() for f in futures]
            print(self._results)
            return self._aggregate_results()

    def _split_dataframe(self, df, splits):
        """Takes a dataframe and an integer of the number of splits to create.
        Returns a list of dataframes.
        """
        dataframes = []
        index_to_split = df.shape[1] // splits
        for i in range(splits):
            if len(dataframes) == 0:
                dataframes.append(df.iloc[:, :index_to_split])
            else:
                try:
                    dataframes.append(
                        df.iloc[:, index_to_split * i : index_to_split * (i + 1)]
                    )
                except IndexError:
                    dataframes.append(df.iloc[:, index_to_split * i :])
        if df.shape[1] - 1 != sum([df.shape[1] - 1 for df in dataframes]):
            dataframes[-1] = pd.concat([dataframes[-1], df.iloc[:, -1:]], axis=1)
        return dataframes

    def _run_queries(self, df):
        """Target process method used to query for CVEs"""
        cve_query = VulnerabilityQuery(self._api_key)
        return cve_query.query(df)

    def _aggregate_results(self):
        """Concatenate resulting CVE dataframes together, so long as
        they are not both empty (no CVEs were returned)
        """
        if self._results[0].shape[1] == 0 and self._results[1].shape[1] == 0:
            return self._results[0]
        else:
            return pd.concat([df for df in self._results], axis=1)
