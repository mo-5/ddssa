""" tests contains any unit tests for backend files
"""
import json
import os
import unittest
import pandas as pd

import requests
from jsonschema import validate

from capstone_project.backend.api.vulnerability_query import VulnerabilityQuery
from capstone_project.tests.test_utils import TestUtils
from capstone_project.backend.parsing.package_ids import PackageIds


class TestVulnerabilityQuery(unittest.TestCase):
    """TestVulnerabilityQuery is responsible for ensuring the correct
    functionality of query sent and received from the CPE database.
    """

    def setUp(self):
        self._test_path = TestUtils().get_test_path()
        self._api_query = VulnerabilityQuery.instance()

    def test_query_schemas(self):
        """Validate a query request and response retrieved from the NIST CPE
        database against the provided schema."""
        with open(
            os.path.join(
                self._test_path,
                "schemas",
                "query_schema_cpe.json",
            )
        ) as file:
            schema_file_request = json.load(file)

        with open(
            os.path.join(
                self._test_path,
                "schemas",
                "response_schema_cpe.json",
            )
        ) as file:
            schema_file_return = json.load(file)

        default_params = {
            "addOns": "cves",
            "keyword": "Django 1.12.1",
            "resultsPerPage": 2000,
            "startIndex": 0,
            "includeDeprecated": "true",
        }

        try:
            validate(
                default_params,
                schema=schema_file_request,
            )
        except ValueError:
            self.fail(
                "Returned json data failed to validate against the "
                "query_schema_cpe.json schema."
            )

        try:
            validate(
                requests.get(self._api_query._url, params=default_params).json(),
                schema=schema_file_return,
            )
        except ValueError:
            self.fail(
                "Returned json data failed to validate against the "
                "response_schema_cpe.json schema."
            )

    def test_single_query(self):
        """Send a query request with a single package version value and ensure the
        response retrieved from the NIST CPE database matches with the expected result"""
        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [("==", "1.1.2")], PackageIds.SINGLE],
        )
        query_data_returned = self._api_query.query(package_df)
        expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode", "CVSS"],
            data=["Django", [("==", "1.1.2")], None, PackageIds.SINGLE, None],
        )
        assert query_data_returned.set_axis(
            ["i"], axis="columns", inplace=True
        ) == expected_result.set_axis(["i"], axis="columns", inplace=True)

    def test_no_ver_query(self):
        """Send a query request with no package version value and ensure the
        response retrieved from the NIST CPE database matches with the expected result"""
        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [("", "")], PackageIds.NO_VER],
        )
        query_data_returned = self._api_query.query(package_df)
        expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode", "CVSS"],
            data=["Django", [("", "")], None, PackageIds.NO_VER, None],
        )
        assert query_data_returned.set_axis(
            ["i"], axis="columns", inplace=True
        ) == expected_result.set_axis(["i"], axis="columns", inplace=True)

    def test_max_query(self):
        """Send a query request with a maximum package version value and ensure the
        response retrieved from the NIST CPE database matches with the expected result"""
        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [(">=", "1.1.2")], PackageIds.MAX],
        )
        query_data_returned = self._api_query.query(package_df)
        expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode", "CVSS"],
            data=["Django", [(">=", "1.1.2")], None, PackageIds.MAX, None],
        )
        assert query_data_returned.set_axis(
            ["i"], axis="columns", inplace=True
        ) == expected_result.set_axis(["i"], axis="columns", inplace=True)

        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [(">", "1.5")], PackageIds.MAX],
        )
        query_data_returned = self._api_query.query(package_df)
        expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode", "CVSS"],
            data=["Django", [(">", "1.5")], None, PackageIds.MAX, None],
        )
        assert query_data_returned.set_axis(
            ["i"], axis="columns", inplace=True
        ) == expected_result.set_axis(["i"], axis="columns", inplace=True)

    def test_range_query(self):
        """Send a query request with a range of package version values and ensure the
        response retrieved from the NIST CPE database matches with the expected result"""
        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [(">=", "1.5"), ("<=", "1.6")], PackageIds.RANGE],
        )
        query_data_returned = self._api_query.query(package_df)
        expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode", "CVSS"],
            data=[
                "Django",
                [(">=", "1.5"), ("<=", "1.6")],
                None,
                PackageIds.RANGE,
                None,
            ],
        )
        assert query_data_returned.set_axis(
            ["i"], axis="columns", inplace=True
        ) == expected_result.set_axis(["i"], axis="columns", inplace=True)

        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [(">", "1.5"), ("<=", "1.6")], PackageIds.RANGE],
        )
        query_data_returned = self._api_query.query(package_df)
        expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode", "CVSS"],
            data=[
                "Django",
                [(">", "1.5"), ("<=", "1.6")],
                None,
                PackageIds.RANGE,
                None,
            ],
        )
        assert query_data_returned.set_axis(
            ["i"], axis="columns", inplace=True
        ) == expected_result.set_axis(["i"], axis="columns", inplace=True)

        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [(">=", "1.5"), ("<", "1.6")], PackageIds.RANGE],
        )
        query_data_returned = self._api_query.query(package_df)
        expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode", "CVSS"],
            data=[
                "Django",
                [(">=", "1.5"), ("<", "1.6")],
                None,
                PackageIds.RANGE,
                None,
            ],
        )
        assert query_data_returned.set_axis(
            ["i"], axis="columns", inplace=True
        ) == expected_result.set_axis(["i"], axis="columns", inplace=True)

        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [(">", "1.5"), ("<", "1.6")], PackageIds.RANGE],
        )
        query_data_returned = self._api_query.query(package_df)
        expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode", "CVSS"],
            data=["Django", [(">", "1.5"), ("<", "1.6")], None, PackageIds.RANGE, None],
        )
        assert query_data_returned.set_axis(
            ["i"], axis="columns", inplace=True
        ) == expected_result.set_axis(["i"], axis="columns", inplace=True)

    def test_exclude_query(self):
        """Send a query request with an excluded package value and ensure the
        response retrieved from the NIST CPE database matches with the expected result"""
        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [("!=", "1.12.1")], PackageIds.EXCLUDE],
        )
        query_data_returned = self._api_query.query(package_df)
        expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode", "CVSS"],
            data=["Django", [("!=", "1.12.1")], None, PackageIds.EXCLUDE, None],
        )
        assert query_data_returned.set_axis(
            ["i"], axis="columns", inplace=True
        ) == expected_result.set_axis(["i"], axis="columns", inplace=True)

    def test_mixed_query(self):
        """Send a query request with different packages and version values and ensure the
        response retrieved from the NIST CPE database matches with the expected result"""

        query_dict = {
            "i": pd.Series(
                ["Django", [("==", "1.1.2")], PackageIds.SINGLE],
                index=["Name", "Version", "Mode"],
            ),
            "ii": pd.Series(
                ["Django", [(">=", "1.5"), ("<", "1.6")], PackageIds.RANGE],
                index=["Name", "Version", "Mode"],
            ),
        }

        package_df = pd.DataFrame(query_dict)
        query_data_returned = self._api_query.query(package_df)

        expected_dict = {
            "i": pd.Series(
                ["Django", [("==", "1.1.2")], None, PackageIds.SINGLE, None],
                index=["Name", "Version", "CVEs", "Mode", "CVSS"],
            ),
            "ii": pd.Series(
                ["Django", [(">=", "1.5"), ("<", "1.6")], None, PackageIds.RANGE, None],
                index=["Name", "Version", "CVEs", "Mode", "CVSS"],
            ),
        }

        expected_result = pd.DataFrame(expected_dict)
        assert query_data_returned.set_axis(
            ["i", "ii"], axis="columns", inplace=True
        ) == expected_result.set_axis(["i", "ii"], axis="columns", inplace=True)

    def test_singleton(self):
        # Creating a new instance using the instance method should be the same as the instance from the setUp() method above
        new_instance = VulnerabilityQuery.instance()
        assert new_instance is self._api_query

        # Creating the constructor should raise an exception
        with self.assertRaises(Exception):
            call_constructor = VulnerabilityQuery()
