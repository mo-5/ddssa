""" tests contains any unit tests for backend files
"""
import json
import os
import unittest
import pandas as pd

import requests
from jsonschema import validate

from capstone_project.backend.api.vulnerability_query import VulnerabilityQuery
from capstone_project.tests.test_utils import TestUtils
from capstone_project.backend.parsing.package_ids import PackageIds


class TestVulnerabilityQuery(unittest.TestCase):
    """TestVulnerabilityQuery is responsible for ensuring the correct
    functionality of query sent and received from the CPE database.
    """

    def setUp(self):
        self._test_path = TestUtils().get_test_path()
        self._api_query = VulnerabilityQuery.instance()

    def test_query_schemas(self):
        """Validate a query request and response retrieved from the NIST CPE
        database against the provided schema."""
        with open(
            os.path.join(
                self._test_path,
                "schemas",
                "query_schema_cpe.json",
            )
        ) as file:
            schema_file_request = json.load(file)

        with open(
            os.path.join(
                self._test_path,
                "schemas",
                "response_schema_cpe.json",
            )
        ) as file:
            schema_file_return = json.load(file)

        default_params = {
            "addOns": "cves",
            "keyword": "Django 1.12.1",
            "resultsPerPage": 2000,
            "startIndex": 0,
            "includeDeprecated": "true",
        }

        try:
            validate(
                default_params,
                schema=schema_file_request,
            )
        except ValueError:
            self.fail(
                "Returned json data failed to validate against the "
                "query_schema_cpe.json schema."
            )

        try:
            validate(
                requests.get(self._api_query._url, params=default_params).json(),
                schema=schema_file_return,
            )
        except ValueError:
            self.fail(
                "Returned json data failed to validate against the "
                "response_schema_cpe.json schema."
            )

    def test_single_query(self):
        """Send a query request with a single package version value and ensure the
        response retrieved from the NIST CPE database matches with the expected result"""
        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [("==", "1.1.2")], PackageIds.SINGLE],
        )
        print("\n results \n")
        # print(self._api_query._results)
        print("\n package_df \n")
        print(package_df)
        query_data_returned = self._api_query.query(package_df)
        expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode"],
            data=[
                "Django",
                [("==", "1.1.2")],
                "['CVE-2010-4534', 'CVE-2010-4535', 'CVE-2011-0696', 'CVE-2011-0697', 'CVE-2011-0698', 'CVE-2011-4136', 'CVE-2011-4137', 'CVE-2011-4138', 'CVE-2011-4139', 'CVE-2011-4140', 'CVE-2012-3442', 'CVE-2012-3443', 'CVE-2012-3444', 'CVE-2014-0472', 'CVE-2014-0473', 'CVE-2014-0474', 'CVE-2014-0480', 'CVE-2014-0481', 'CVE-2014-0482', 'CVE-2014-0483', 'CVE-2015-0219', 'CVE-2015-0220', 'CVE-2015-0221', 'CVE-2015-0222', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2015-5144', 'CVE-2015-8213', 'CVE-2016-6186', 'CVE-2016-7401', 'CVE-2019-19844', 'CVE-2020-17495', 'CVE-2021-33203']",
                PackageIds.SINGLE,
            ],
        )
        print("\n single \n")
        print(query_data_returned)
        query_data_returned.reset_index(drop=True).to_csv("query_single_result.csv")
        expected_result.reset_index(drop=True).to_csv("expected_single.csv")
        df1 = query_data_returned.set_axis(["i"], axis="columns", inplace=True)
        df2 = expected_result.set_axis(["i"], axis="columns", inplace=True)
        assert df1 == df2

    def test_no_ver_query(self):
        """Send a query request with no package version value and ensure the
        response retrieved from the NIST CPE database matches with the expected result"""
        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [("", "")], PackageIds.NO_VER],
        )
        query_data_returned = self._api_query.query(package_df)
        expected_result = expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode"],
            data=["Django", [("", "")], None, PackageIds.NO_VER],
        )
        print("\n no_ver \n")
        print(query_data_returned)
        query_data_returned.reset_index(drop=True).to_csv("query_no_ver_result.csv")
        expected_result.reset_index(drop=True).to_csv("expected_no_ver.csv")
        df1 = query_data_returned.set_axis(["i"], axis="columns", inplace=True)
        df2 = expected_result.set_axis(["i"], axis="columns", inplace=True)
        assert df1 == df2

    def test_max_query(self):
        """Send a query request with a maximum package version value and ensure the
        response retrieved from the NIST CPE database matches with the expected result"""
        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [(">=", "1.9.13")], PackageIds.MAX],
        )
        query_data_returned = self._api_query.query(package_df)
        expected_result = expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode"],
            data=["Django", [(">=", "1.9.13")], None, PackageIds.MAX],
        )
        print("max")
        print(query_data_returned)
        query_data_returned.reset_index(drop=True).to_csv("query_max_result.csv")
        expected_result.reset_index(drop=True).to_csv("expected_max.csv")
        df1 = query_data_returned.set_axis(["i"], axis="columns", inplace=True)
        df2 = expected_result.set_axis(["i"], axis="columns", inplace=True)
        assert df1 == df2

    # def test_range_query(self):
    #     """Send a query request with a range of package version values and ensure the
    #     response retrieved from the NIST CPE database matches with the expected result"""
    #     package_df = pd.DataFrame(
    #         index=["Name", "Version", "Mode"],
    #         data=["Django", [(">=", "1.5"), ("<", "1.6")], PackageIds.RANGE],
    #     )
    #     query_data_returned = self._api_query.query(package_df)
    #     expected_result = expected_result = pd.DataFrame(
    #         index=["Name", "Version", "CVEs", "Mode"],
    #         data=["Django", [("(>=, 1.5), (<, 1.6)")], None, PackageIds.RANGE],
    #     )
    #     print("range")
    #     print(query_data_returned)
    #     query_data_returned.reset_index(drop=True).to_csv("query_range.csv")
    #     expected_result.reset_index(drop=True).to_csv("expected_range.csv")
    #     df1 = query_data_returned.set_axis(['i', 'ii'], axis='columns', inplace=True)
    #     df2 = expected_result.set_axis(['i'], axis='columns', inplace=True)
    #     assert df1 == df2

    def test_exclude_query(self):
        """Send a query request with a package excluded value and ensure the
        response retrieved from the NIST CPE database matches with the expected result"""
        package_df = pd.DataFrame(
            index=["Name", "Version", "Mode"],
            data=["Django", [("==", "1.12.1")], PackageIds.EXCLUDE],
        )
        query_data_returned = self._api_query.query(package_df)
        expected_result = expected_result = pd.DataFrame(
            index=["Name", "Version", "CVEs", "Mode"],
            data=["Django", [("==", "1.12.1")], None, PackageIds.EXCLUDE],
        )
        print("exclude")
        print(query_data_returned)
        query_data_returned.reset_index(drop=True).to_csv("query_exclude.csv")
        expected_result.reset_index(drop=True).to_csv("expected_exclude.csv")
        df1 = query_data_returned.set_axis(["i"], axis="columns", inplace=True)
        df2 = expected_result.set_axis(["i"], axis="columns", inplace=True)
        assert df1 == df2

    # def test_mixed_query(self):
    #     """Send a query request with different packages and version values and ensure the
    #     response retrieved from the NIST CPE database matches with the expected result"""
    #     package_df = pd.DataFrame(
    #         index=["Name", "Version", "Mode"],
    #         data=["Django", [("==", "1.12.1")], PackageIds.SINGLE],
    #     )
    #     query_data_returned = self._api_query.query(package_df)
    #     expected_result = expected_result = pd.DataFrame(
    #         index=["Name", "Version", "CVEs", "Mode"],
    #         data=["Django", [("==", "1.12.1")], None, PackageIds.SINGLE],
    #     )
    #     assert query_data_returned == expected_result
